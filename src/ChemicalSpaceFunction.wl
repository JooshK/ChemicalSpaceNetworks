(* ::Package:: *)

(* ::Input:: *)
(*Needs["WolframChemistry`MoleculeFingerprints`"];*)
(*validSmilesQ[smile_String] :=*)
(*    MatchQ[Quiet[Molecule[smile]], Except[$Failed]]*)
(*moleculeListQ[list_] := AllTrue[list, MoleculeQ]*)
(*cleanDataset[data_Dataset] :=*)
(*    data[Select[StringFreeQ[#Smiles, "."]&]]*)
(*SetAttributes[makeID, Listable];*)
(*makeID[prefix_String, number_Integer?Positive, maxDigits_Integer?Positive] :=prefix <> IntegerString[number, 10, Max[maxDigits, Ceiling[Log10[number]]]]*)
(*Options[generateDataset]={"FieldSeparator"->";"};*)
(*generateDataset[file_,OptionsPattern[]] := Module[{data, dataset, idKey, ids},*)
(*  data = Import[file, "Table", "FieldSeparators" -> OptionValue["FieldSeparator"], "RepeatedSeparators" -> False];*)
(*  dataset = Dataset[AssociationThread[First[data] -> #]& /@ Rest[data]];*)
(*  idKey = SelectFirst[Keys[First[dataset]] // Normal, StringMatchQ[RegularExpression["(?i).*ID.*"]]];*)
(*  ids = If[MissingQ[idKey], makeID["ID", Range[Length[dataset]], Ceiling[Log10[Length[dataset]]]], Normal@dataset[All, idKey]];*)
(*  AssociationThread[ids, Normal@dataset[All, {"Smiles"}]] // Dataset // cleanDataset*)
(*]*)
(*Options[generateDatasetBio]={"FieldSeparator"->";"};*)
(*generateDatasetBio[file_,biotype_,OptionsPattern[]] := Module[{data, dataset, idKey, ids},*)
(*  data = Import[file, "Table", "FieldSeparators" -> OptionValue["FieldSeparator"], "RepeatedSeparators" -> False];*)
(*  dataset = Dataset[AssociationThread[First[data] -> #]& /@ Rest[data]];*)
(*  idKey = SelectFirst[Keys[First[dataset]] // Normal, StringMatchQ[RegularExpression["(?i).*ID.*"]]];*)
(*  ids = If[MissingQ[idKey], makeID["ID", Range[Length[dataset]], Ceiling[Log10[Length[dataset]]]], Normal@dataset[All, idKey]];*)
(*  dataset = AssociationThread[ids, Normal@dataset[All, {"Smiles", "Standard Value"}]] // Dataset;*)
(*  dataset = dataset[Select[NumericQ[#"Standard Value"]&]] // cleanDataset;*)
(*  dataset[All, {"Standard Value" -> (9 - Log10[#]&)}][All, KeyMap[# /. "Standard Value" -> biotype&]]*)
(*]*)
(*Options[assignFingerprintsList] = Join[{"Fingerprint" -> TopologicalFingerprint}, Options[TopologicalFingerprint],Options[generateDataset]];*)
(*assignFingerprintsList[molList_, OptionsPattern[]] :=*)
(*    Dataset[AssociationThread[{"Molecule", "Fingerprint"} -> #]& /@ Map[{#, OptionValue["Fingerprint"][#]}&, molList]]*)
(*Options[assignFingerprints] = Join[{"Fingerprint" -> TopologicalFingerprint}, Options[TopologicalFingerprint],Options[generateDataset]];*)
(*assignFingerprints[dataset_Dataset, opts : OptionsPattern[]] := dataset[All,*)
(*  With[{mol = Molecule[#"Smiles", IncludeHydrogens -> False]}, <|##,*)
(*    "Molecule" -> mol, "Fingerprint" -> OptionValue["Fingerprint"][mol]|>]&]*)


(* ::Input:: *)
(*defaultBioToColor[bio_]:=Which[*)
(*bio<5,Darker@Red,*)
(*5<=bio<6,Red,*)
(*6<=bio<7,Orange,*)
(*7<=bio<8,Yellow,*)
(*8<=bio<9,Darker@Green,*)
(*9<=bio<10,LightBlue,*)
(*10<=bio,Blue,True,White]*)
(*Options[generateInput]=Join[{"BioData"->False,"BioType"->"pKi"},Options[assignFingerprintsList]];*)
(*generateInput[userInput_,opts:OptionsPattern[]]:=Module[{dataset},*)
(*dataset=Which[*)
(*StringQ[userInput]&&StringEndsQ[userInput,".csv"],If[TrueQ[OptionValue["BioData"]],generateDatasetBio[userInput,OptionValue["BioType"]],generateDataset[userInput]],*)
(*StringQ[userInput]&&StringEndsQ[userInput,".smi"],Import[userInput],*)
(*ListQ[userInput]&&moleculeListQ[userInput],userInput,*)
(*ListQ[userInput]&&validSmilesQ[First@userInput],Molecule/@userInput,*)
(*True,$Failed];*)
(*If[dataset===$Failed,Return[$Failed]];*)
(*If[ListQ[userInput],*)
(*assignFingerprintsList[dataset,"Fingerprint"->OptionValue["Fingerprint"]],*)
(*assignFingerprints[dataset,"Fingerprint"->OptionValue["Fingerprint"]]]*)
(*]*)
(*Options[generateGraphWithMols]=Join[Options[MoleculeDistance],{"Embedding"->"GravityEmbedding"}];*)
(*generateGraphWithMols[fingerprintData_Dataset,cutoff_,OptionsPattern[]]:=Module[{fingerprints,edges,graph},*)
(*fingerprints=KeyValueMap[{#1,#2["Fingerprint"]}&,fingerprintData]//Normal;*)
(*edges=ParallelMap[UndirectedEdge[Sequence@@First/@#]->N@*OptionValue["DistanceFunction"]@@Last/@#&,Subsets[fingerprints,{2}]]//Association;*)
(*graph=Select[edges,#<=cutoff&]//Keys//Graph[Tooltip[#,MoleculePlot[fingerprintData[#,"Molecule"]]]&/@Union@@List@@@#,#,GraphLayout->OptionValue["Embedding"]]&;*)
(*SetProperty[graph,EdgeWeight->Normal@Map[1-#&,edges]]*)
(*]*)
(*Options[generateGraph]=Join[Options[MoleculeDistance],{"Embedding"->"GravityEmbedding"}];*)
(*generateGraph[fingerprintData_Dataset,cutoff_,OptionsPattern[]]:=Module[{fingerprints,edges,graph},*)
(*fingerprints=KeyValueMap[{#1,#2["Fingerprint"]}&,fingerprintData]//Normal;*)
(*edges=ParallelMap[UndirectedEdge[Sequence@@First/@#]->N@*OptionValue["DistanceFunction"]@@Last/@#&,Subsets[fingerprints,{2}]]//Association;*)
(*graph=Select[edges,#<=cutoff&]//Keys//Graph[Tooltip/@Union@@List@@@#,#,GraphLayout->OptionValue["Embedding"]]&;*)
(*SetProperty[graph,EdgeWeight->Normal@Map[1-#&,edges]]*)
(*]*)
(*Options[chemicalSpaceNetwork]:=Join[{"Embed Molecules"->False},{"Coloring"->defaultBioToColor, "UI"->False},Options[generateGraph],Options[generateInput]]*)
(*chemicalSpaceNetwork[userInput_,cutoff_,opts:OptionsPattern[]]:=Module[{fingerprints,vertices,style,graph,legend},*)
(*fingerprints=generateInput[userInput,"BioData"->OptionValue["BioData"],"BioType"->OptionValue["BioType"]];*)
(*graph=If[OptionValue["Embed Molecules"],generateGraphWithMols[fingerprints,cutoff],generateGraph[fingerprints,cutoff]];*)
(*If[OptionValue["UI"], $fingerprintData=fingerprints,$graph=graph];*)
(*If[OptionValue["BioData"]&&Not[OptionValue["UI"]],*)
(*vertices=VertexList[graph];*)
(*style=#->OptionValue["Coloring"][fingerprints[#,OptionValue["BioType"]]]&/@vertices;*)
(*legend=Row[{BarLegend[{OptionValue["Coloring"],{4,11}},6],Rotate["pKi",90Degree]}];*)
(*SetProperty[graph,VertexStyle->style]//Legended[#,legend]&,graph]*)
(*]*)
